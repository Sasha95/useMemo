{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","count","setCount","wordIndex","setWordIndex","words","word","letterCount","useMemo","i","length","computeLetterCount","style","padding","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAqDeA,MAnDf,WAAe,MAEaC,mBAAS,GAFtB,mBAENC,EAFM,KAECC,EAFD,OAIqBF,mBAAS,GAJ9B,mBAING,EAJM,KAIKC,EAJL,KAOPC,EAAQ,CAAC,MAAO,OAAQ,KAAM,QAC9BC,EAAOD,EAAMF,GAYbI,EAAcC,kBAAQ,kBARD,SAAAF,GAEzB,IADA,IAAIG,EAAI,EACDA,EAAI,KAAYA,IACvB,OAAOH,EAAKI,OAKoBC,CAAmBL,IAAO,CAACA,IAM7D,OACE,yBAAKM,MAAO,CAAEC,QAAS,SACrB,gEAEA,+BACIP,EADJ,SACgBC,EADhB,YAIA,4BACEO,QAAS,WAEPV,EADaD,EAAY,IAAME,EAAMK,OAAS,EAAIP,EAAY,KAFlE,aAQA,6BACA,6BACA,0DACA,uCAAaF,GACb,4BAAQa,QAAS,kBAAMZ,EAASD,EAAQ,KAAxC,eCpCcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5eb8e123.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\n\nfunction App() {\n  // State for our counter\n  const [count, setCount] = useState(0);\n  // State to keep track of current word in array we want to show\n  const [wordIndex, setWordIndex] = useState(0);\n\n  // Words we can flip through and view letter count\n  const words = ['hey', 'this', 'is', 'cool'];\n  const word = words[wordIndex];\n\n  // Returns number of letters in a word\n  // We make it slow by including a large and completely unnecessary loop\n  const computeLetterCount = word => {\n    let i = 0;\n    while (i < 1000000000) i++;\n    return word.length;\n  };\n\n  // Memoize computeLetterCount so it uses cached return value if input array ...\n  // ... values are the same as last time the function was run.\n  const letterCount = useMemo(() => computeLetterCount(word), [word]);\n\n  // This would result in lag when incrementing the counter because ...\n  // ... we'd have to wait for expensive function when re-rendering.\n  //const letterCount = computeLetterCount(word);\n\n  return (\n    <div style={{ padding: '15px' }}>\n      <h2>Compute number of letters (slow)</h2>\n\n      <p>\n        \"{word}\" has {letterCount} letters\n      </p>\n\n      <button\n        onClick={() => {\n          const next = wordIndex + 1 === words.length ? 0 : wordIndex + 1;\n          setWordIndex(next);\n        }}\n      >\n        Next word\n      </button>\n      <br />\n      <br />\n      <h2>Increment a counter (fast)</h2>\n      <p>Counter: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}